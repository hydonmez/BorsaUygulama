<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGphWQBqYVkEamFZKWphWW1qYVmtamFZ2mph
        WfNqYVn9amFZ/WphWfJqYVnaamFZrWphWWxqYVkpamFZBGphWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGphWQBqYVkDamFZN2phWZhqYVnfamFZ+2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ+2phWd9qYVmXamFZN2phWQNqYVkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGpgWQBqYVkAamFZGmphWYpqYVnqamFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVnqamFZiWph
        WRpqYVkAamBZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqYVkAamJZAGphWTZqYVnDamFZ/mph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn+amFZwmphWTVrYlkAaWBZAAAAAAAAAAAAAAAAAAAAAAAAAAAAaWBZAGpiWQBqYVlBamFZ2Wph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ2WphWUFqYlkAamBZAAAAAAAAAAAAAAAAAGlhWABqYVkAamFZNmph
        WdlqYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ2WphWTZqYVkAamBZAAAAAAAAAAAAamFZAGph
        WRpqYVnCamFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/aV9Z/2lfWf9pYFn/aWBZ/2lf
        Wf9pX1n/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZwWphWRpqYVkAAAAAAGph
        WQBqYFkCamFZimphWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/aWBZ/21mWf95elr/hpBc/46c
        XP+OnFz/hpBc/3l7Wv9tZln/aV9Z/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZiWph
        WQJqYVkAamFZAGphWThqYVnpamFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amBZ/2tiWf9/g1v/nLRd/6zP
        X/+v1V//rtNf/67TX/+v1V//rM9f/5y1Xf9/g1v/a2JZ/2pgWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVnpamFZN2phWQBqYVkDamFZl2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2lfWf9sZVn/jZtc/6zP
        X/+sz1//mK5d/4aPW/99gVv/fYFb/4aPW/+Yrl3/rM9f/6zQX/+Nm1z/bWVZ/2pgWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVmXamFZAmphWSpqYVnfamFZ/2phWf9qYVn/amFZ/2lgWf93d1r/f4Vb/42b
        XP+v01//ob1e/32AW/9rY1n/aV9Z/2lfWf9pX1n/aV9Z/2tjWf98gFv/ob1e/6/UX/+Nm1z/a2JZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWd5qYVkqamFZbWphWftqYVn/amFZ/2phWf9qYVn/aV9Z/4KJ
        W/+sz1//rtJf/6K+Xv90clr/aV9Z/2pgWf9oX1f/aF9X/2hfV/9oX1f/amFZ/2lfWf90clr/ob1e/6zQ
        X/9/g1v/aWBZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ+2phWWxqYVmtamFZ/2phWf9qYVn/amFZ/2ph
        Wf9pX1n/gohb/6/TX/+w1l//o8Fe/3p8Wv9pYFj/b2Ze/5WPif+2sq7/rqqm/46Hgv9tZV3/aWBY/2lf
        Wf99gFv/rM9f/5y0Xf9tZln/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZrGphWdlqYVn/amFZ/2ph
        Wf9qYVn/amFZ/2lfWf+CiVv/r9Rf/6rLX/+bsl3/foJa/3FpYf/Avbn/+vr5/9/d2//FwsD/4+Li/7Ku
        qv9vZ1//aWBZ/2tjWf+Yrl3/rM9f/3l6Wv9pYFn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVnZamFZ8mph
        Wf9qYVn/amFZ/2phWf9qYVn/aWBZ/3h4Wv+Kllz/d3da/2xkWf9oXlf/p6Kd//7+/v/Z19X/hn94/3tz
        bP+yrqr/6enp/5uVkP9oX1f/aV9Z/4aPW/+u01//hY5b/2lfWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        WfJqYVn9amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amBY/2lfVv9pX1j/amFZ/25lXf/U0c///////97c
        2v+tqKP/gnp0/5yWkf/r6+v/wr+9/2xjW/9pYFn/cm5a/4CGW/9yb1r/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/WphWf1qYVn/amFZ/2phWf9qYVn/amFZ/2phWP9nZ23/Y3GN/2hnbP9qYFj/cWhg/9za
        2P//////3tza/4uEfv+MhX//0tDP/+7u7v/Kx8X/bmVe/2phWP9qYFf/aV5X/2pgWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn9amFZ8mphWf9qYVn/amFZ/2phWf9qYVn/amBW/2F1mv9UlP3/YXab/2pg
        Vv9rYlr/xMC9///////Gw8D/hHx2/4d/ef+8ubb/7u7v/7Swrf9qYFf/aWJe/2Zref9geab/Zmt6/2pg
        V/9qYVn/amFZ/2phWf9qYVn/amFZ/2phWfJqYVnZamFZ/2phWf9qYVn/amFZ/2phWf9qYFf/ZW1+/1WT
        9/9bhMj/amJc/2hfV/+Kg3z/7ezr//b19f+uqqX/l5KM/9zb2v/a2dj/g3x1/2Jvif9ahs7/VpHy/1SV
        /f9jc5H/amBW/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ2WphWaxqYVn/amFZ/2phWf9qYVn/amFZ/2ph
        WP9pY2D/WofR/1WT9v9kb4X/amBW/2pgWP+QioT/19TS/+vq6f/b2tj/xsTC/4mCfP9pYFj/ZW2A/1iM
        4v9Ulv//VJX+/2Nzkf9qYFb/amFZ/2phWf9qYVn/amFZ/2phWf9qYVmsamFZbGphWftqYVn/amFZ/2ph
        Wf9qYVn/amFZ/2pgV/9jcYv/VZP3/1mK3P9naXL/amBW/2lfV/9waGD/gHhy/352cP9vZl//aWBX/2pg
        Vv9naXL/WIvf/1WU+/9Vk/f/YnOS/2pgVv9qYVn/amFZ/2phWf9qYVn/amFZ+2phWWxqYVkqamFZ3mph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2piW/9ffK7/VJX8/1mK3P9kb4X/amJc/2pgVv9pX1X/aV9V/2pg
        Vv9qYlz/ZG+G/1iL3f9Ulfz/X3ut/2Nxjf9ma3n/amFX/2phWf9qYVn/amFZ/2phWf9qYVneamFZKmph
        WQNqYVmXamFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFY/2ljX/9ffK7/VZP3/1WT9v9bhMj/YXab/2Rv
        h/9kb4f/YXab/1uEyP9Vk/b/VZP3/197rP9pY1//amBX/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        WZdqYVkDamFZAGphWThqYVnpamFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFY/2piW/9jcYv/WofS/1WT
        +P9Ulf//VJT9/1SU/f9Ulf//VZP4/1qH0f9kcYr/amJb/2phWP9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVnpamFZOGphWQBqYVkAamBZAmphWYlqYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2pg
        V/9pY2D/ZW1+/2F3nv9ffK//X3yv/2F2nf9lbX7/aWNg/2pgV/9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWYlqYVkCamFZAAAAAABqYVkAamFZGmphWcJqYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYFf/amBW/2pgV/9qYFf/amBW/2pgV/9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVnCamFZGmphWQAAAAAAAAAAAGlhWABqYVkAamFZNmphWdlqYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ2WphWTZqYVkAamFYAAAAAAAAAAAAAAAAAGphWABqYVoAamFZQWph
        WdlqYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWdlqYVlBamFZAGphWAAAAAAAAAAAAAAAAAAAAAAAAAAAAGph
        WABrYloAamFZNWphWcJqYVn+amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf5qYVnDamFZNWpiWgBqYVkAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGphWABqYVkAamFZGmphWYlqYVnqamFZ/2phWf9qYVn/amFZ/2phWf9qYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWf9qYVnqamFZimphWRpqYVkAamFYAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqYVkAamFZA2phWTdqYVmXamFZ32phWftqYVn/amFZ/2ph
        Wf9qYVn/amFZ/2phWf9qYVn/amFZ/2phWftqYVngamFZmGphWTdqYVkDamFZAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAamFZAGphWQRqYVkpamFZbGph
        Wa1qYVnZamFZ8mphWf1qYVn9amFZ82phWdpqYVmtamFZbWphWSlqYVkEamFZAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAH/AAAA/gAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>